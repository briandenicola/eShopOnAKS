kind: Deployment
apiVersion: apps/v1
metadata:
  name: order-processor
  namespace: {{ .Values.NAMESPACES.APP }}
  labels:
    app: {{ .Chart.Name }}
    service: order-processor
spec:
  replicas: 1
  selector:
    matchLabels:
      service: order-processor
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1     
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        service: order-processor
        azure.workload.identity/use: "true"         
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.ISTIO.ORDERING.PORT | quote }}
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: {{ .Values.WORKLOAD_ID.NAME }}
      nodeSelector:
        App: eshop
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000  
        supplementalGroups: [2000]
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault              
      containers:
        - name: order-processor
          image: bjd145/eshop-order-processor:01009049 #{{ print .Values.ACR.NAME ".azurecr.io/orderprocessor:" .Values.GIT_COMMIT_VERSION }}
          ports:
          - containerPort: {{ .Values.ISTIO.ORDERING.PORT }}          
          resources:
            limits:
              cpu: "1"
              memory: 256Mi
            requests:
              cpu: "0.5"
              memory: 128Mi
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            readOnlyRootFilesystem: true            
            capabilities:
              drop: ["ALL"]        
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.ISTIO.ORDERING.PORT }}
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 3      
          envFrom:
          - configMapRef:
              name: ordering-cm
          env:
          - name: ConnectionStrings__orderingdb
            valueFrom:
              secretKeyRef:
                name: eshop-sql-secrets 
                key: orderingdb-connection-string
          - name: ConnectionStrings__eventbus
            valueFrom:
              secretKeyRef:
                name: eshop-eventbus-secrets
                key:  RABBITMQ_CONNECTION_STRING              
{{- if .Values.DEPLOY.SQL -}}
{{- else }}                  
          volumeMounts:
          - name: secrets-store-inline
            mountPath: "/mnt/secrets-store"                       
            readOnly: true  
      volumes:
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: eshop-sql-secrets
{{- end }}         
      tolerations:
      - key: "ReservedFor"
        operator: "Equal"
        value: "apps"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: order-processor
  namespace: {{ .Values.NAMESPACES.APP }}
  labels:
    app: {{ .Chart.Name }}
    service: order-processor
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: {{ .Values.ISTIO.ORDERING.PORT }} 
  selector:
    service: order-processor