version: '3'

dotenv: ['.env']

env:
  TITLE: eShop On AKS
  SKU: "Standard_D4ads_v5"
  DEFAULT_REGION: "westus3"
  COUNT: 2
  DOMAIN_ROOT: "bjdazure.tech"
  DEPLOY_SQL: false
  DEPLOY_REDIS: false

tasks:
  default: 
    cmds: 
    - task --list 
  
  up:
    desc: Creates Azure infrastructure and deploys application code
    cmds:
    - terraform -chdir=./infrastructure workspace new {{.REGION}} || true
    - terraform -chdir=./infrastructure workspace select {{.REGION}}
    - terraform -chdir=./infrastructure init
    - task: apply
    - task: creds
    - task: dns
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  apply:
    cmds:
    - terraform -chdir=./infrastructure apply -auto-approve
       -var "region={{.REGION}}" 
       -var "vm_size={{.SKU}}" 
       -var "node_count={{.COUNT}}"
       -var "tags={{.TITLE}}" 
       -var "deploy_postgresql={{.DEPLOY_SQL}}"
       -var "deploy_redis={{.DEPLOY_REDIS}}"
       -compact-warnings
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  refresh:
    cmds:
    - terraform -chdir=./infrastructure refresh 
      -var "region={{.REGION}}" 
      -var "vm_size={{.SKU}}" 
      -var "node_count={{.COUNT}}" 
      -var "tags={{.TITLE}}"
      -var "deploy_postgresql={{.DEPLOY_SQL}}"
      -var "deploy_redis={{.DEPLOY_REDIS}}"      
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  creds:
    desc: Gets credential file for newly created AKS cluster
    cmds:
    - az aks get-credentials -g {{.RG}} -n {{.AKS}} --overwrite-existing
    - sed -i s/devicecode/azurecli/g ~/.kube/config
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw AKS_RESOURCE_GROUP
      AKS: 
        sh: terraform -chdir=./infrastructure output -raw AKS_CLUSTER_NAME

  cluster-config:
    desc: Update cluster configurations
    cmds:
    - helm upgrade --install eshop-k8s-extensions
      --set CERT.EMAIL_ADDRESS={{.APP_NAME}}@{{.DOMAIN_ROOT}}
      --set APP_NAME={{.APP_NAME}} 
      --set WEBAPP_DOMAIN={{.WEBAPP_DOMAIN}} 
      --set APP_INSIGHTS.CONNECTION_STRING="{{.AI_CONNECTION_STRING}}"
      ./charts/eshop-k8s-extensions 
    - kubectl -n otel-system rollout restart deploy otel-collector
    vars:
      APP_NAME:
        sh: terraform -chdir=./infrastructure output -raw APP_NAME
      AI_CONNECTION_STRING:
        sh: terraform -chdir=./infrastructure output -raw AI_CONNECTION_STRING
      WEBAPP_DOMAIN: '{{.APP_NAME}}.{{.DOMAIN_ROOT}}'
      
  build: 
    desc: Builds and pushes the containers
    dir: ./scripts
    cmds:
    - pwsh ./build-containers.ps1 -AppName {{.APP_NAME}} -SubscriptionName {{.SUBSCRIPTION_NAME}} -SourceRootDirectory {{.SOURCE_DIR}} -verbose
    vars:
      APP_NAME: 
        sh: terraform -chdir=../infrastructure output -raw APP_NAME
      SUBSCRIPTION_NAME:
        sh: az account show --query name -o tsv
      SOURCE_DIR: '{{default "~/code/eShop" .CLI_ARGS}}'

  deploy:
    desc: Deploys application via Helm
    dir: ./scripts
    cmds:
    - pwsh ./deploy-services.ps1 -AppName {{.APP_NAME}} -SubscriptionName {{.SUBSCRIPTION_NAME}} -Domain {{.DOMAIN_ROOT}} -verbose
    vars:
      APP_NAME: 
        sh: terraform -chdir=../infrastructure output -raw APP_NAME
      SUBSCRIPTION_NAME:
        sh: az account show --query name -o tsv        

  update-firewalls:
    desc: Update firewall rules for Keyvault, AKS, and ACR
    dir: ./scripts
    cmds:
    - pwsh ./update-firewalls.ps1 -AppName {{.APP_NAME}} -SubscriptionName {{.SUBSCRIPTION_NAME}} -verbose
    vars:
      APP_NAME: 
        sh: terraform -chdir=../infrastructure output -raw APP_NAME
      SUBSCRIPTION_NAME:
        sh: az account show --query name -o tsv           

  dns:
    desc: Gets the IP Addresss of the Istio Gateway
    dir: ./scripts
    cmds:
    - echo 'Manually create an DNS (A) Record "*.{{.APP_NAME}}.{{.DOMAIN_ROOT}}" resolving to {{.IP}}'
    vars:
      APP_NAME: 
        sh: terraform -chdir=../infrastructure output -raw APP_NAME
      IP:
        sh: pwsh ./get-service-ipaddress.ps1 

  certs:
    desc: Gets the Challenge Information required for Cert Manager 
    dir: ./scripts
    cmds:
    - pwsh ./get-cert-manager-challenges.ps1

  status:
    desc: Gets the overall status of the cluster
    cmds:
    - kubectl get nodes -o wide -L kubernetes.azure.com/node-image-version
    - kubectl -n kube-system get pods
    - kubectl -n aks-istio-ingress get pods,services,deployments,gateway
    - kubectl -n aks-istio-system get pods,services,deployments
    - kubectl -n cert-manager get certificate,certificaterequests,orders
    - kubectl -n eshop get pods,services,deployments,virtualservice
    - flux get all
    
  down:
    desc: Destroys all Azure resources and cleans up Terraform
    cmds:
    - az group list --tag Application="{{.TITLE}}" --query "[].name" -o tsv | xargs -ot -n 1 az group delete -y --no-wait -n || true
    - cd infrastructure ;
      rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info || true
