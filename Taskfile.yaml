version: '3'

dotenv: ['.env']

env:
  TITLE:             "eShop On AKS"
  SKU:               "Standard_D4as_v5"
  K8S_VERSION:       "1.30"
  ISTIO_VERSION:     "asm-1-23"
  DEFAULT_REGION:    "westus3"
  DEFAULT_NODE_COUNT: 2
  DOMAIN_ROOT:       "bjdazure.tech"
  DEPLOY_SQL:        false
  DEPLOY_REDIS:      false

tasks:
  default: 
    cmds: 
    - task --list 
  
  up: 
    desc: Builds Complete Environment
    cmds:
    - task: init
    - task: apply 
    - task: creds
    - task: cert
    - task: build 
    - task: dns

  init:
    desc: Creates Azure infrastructure and deploys application code
    cmds:
    - terraform -chdir=./infrastructure workspace new {{.REGION}} || true
    - terraform -chdir=./infrastructure workspace select {{.REGION}}
    - terraform -chdir=./infrastructure init
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  apply:
    cmds:
    - terraform -chdir=./infrastructure apply -auto-approve
        -var "region={{.REGION}}" 
        -var "vm_size={{.SKU}}" 
        -var "node_count={{.DEFAULT_NODE_COUNT}}"
        -var "kubernetes_version={{.K8S_VERSION}}"
        -var "istio_version={{.ISTIO_VERSION}}"
        -var "tags={{.TITLE}}" 
        -var "deploy_postgresql={{.DEPLOY_SQL}}"
        -var "deploy_redis={{.DEPLOY_REDIS}}"
        -compact-warnings
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  refresh:
    cmds:
    - terraform -chdir=./infrastructure refresh 
        -var "region={{.REGION}}" 
        -var "vm_size={{.SKU}}" 
        -var "node_count={{.DEFAULT_NODE_COUNT}}" 
        -var "tags={{.TITLE}}"
        -var "kubernetes_version={{.K8S_VERSION}}"        
        -var "istio_version={{.ISTIO_VERSION}}"
        -var "deploy_postgresql={{.DEPLOY_SQL}}"
        -var "deploy_redis={{.DEPLOY_REDIS}}"      
    vars: 
      REGION: '{{default .DEFAULT_REGION .CLI_ARGS}}'

  creds:
    desc: Gets credential file for newly created AKS cluster
    cmds:
    - az aks get-credentials -g {{.RG}} -n {{.AKS}} --overwrite-existing
    - sed -i s/devicecode/azurecli/g ~/.kube/config
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw AKS_RESOURCE_GROUP
      AKS: 
        sh: terraform -chdir=./infrastructure output -raw AKS_CLUSTER_NAME

  cert:
    desc: Update cluster configurations
    dir: ./scripts    
    cmds:
    - pwsh ./request-certificate.ps1 -AppName {{.APP_NAME}} -DomainName {{.DOMAIN_ROOT}} -verbose
    vars:
      APP_NAME:
        sh: terraform -chdir=../infrastructure output -raw APP_NAME
      
  build: 
    desc: Builds and pushes the containers
    dir: ./scripts
    cmds:
    - pwsh ./build-containers.ps1 -AppName {{.APP_NAME}} -SubscriptionName {{.SUBSCRIPTION_NAME}} -SourceRootDirectory {{.SOURCE_DIR}} -verbose
    vars:
      APP_NAME: 
        sh: terraform -chdir=../infrastructure output -raw APP_NAME
      SUBSCRIPTION_NAME:
        sh: az account show --query name -o tsv
      SOURCE_DIR: '{{default "~/code/eShop" .CLI_ARGS}}'

  deploy:
    desc: Deploys application via Helm
    dir: ./scripts
    cmds:
    - pwsh ./deploy-services.ps1 -AppName {{.APP_NAME}} -SubscriptionName {{.SUBSCRIPTION_NAME}} -Domain {{.DOMAIN_ROOT}} -verbose
    vars:
      APP_NAME: 
        sh: terraform -chdir=../infrastructure output -raw APP_NAME
      SUBSCRIPTION_NAME:
        sh: az account show --query name -o tsv        

  hubble:
    desc: Install Hubble Dashboard for Network Observability 
    dir: ./scripts
    cmds:
    - bash ./hubble-certs.sh
    - kubectl apply -f ../cluster-config/hubble/
    - kubectl get pods -o wide -n kube-system -l k8s-app=hubble-relay
    - cmd: echo; 
        echo -e 'Next. Run the following commands:' &&
        echo -e '\t➡️\033[1m\e[38;5;45mkubectl port-forward -n kube-system svc/hubble-relay --address 127.0.0.1 4245:443 &' &&
        echo -e '\t➡️\033[1m\e[38;5;45mkubectl -n kube-system port-forward svc/hubble-ui 12000:80 &' &&
        echo -e '\t➡️\033[1m\e[38;5;45mhubble observe --pod $(kubectl get pods -o wide -n kube-system -l k8s-app=hubble-relay -o=jsonpath='{.items[0].metadata.name}')'
      silent: true

  update-firewalls:
    desc: Update firewall rules for Keyvault, AKS, and ACR
    dir: ./scripts
    cmds:
    - pwsh ./update-firewalls.ps1 -AppName {{.APP_NAME}} -SubscriptionName {{.SUBSCRIPTION_NAME}} -verbose
    vars:
      APP_NAME: 
        sh: terraform -chdir=../infrastructure output -raw APP_NAME
      SUBSCRIPTION_NAME:
        sh: az account show --query name -o tsv           

  dns:
    desc: Gets the IP Addresss of the Istio Gateway
    dir: ./scripts
    cmds:
    - cmd: echo -e '\t➡️\033[1m\e[38;5;45mManually create an DNS (A) Record "*.{{.APP_NAME}}.{{.DOMAIN_ROOT}}" resolving to {{.IP}}'
      silent: true
    vars:
      APP_NAME: 
        sh: terraform -chdir=../infrastructure output -raw APP_NAME
      IP: 
        sh: kubectl --namespace aks-istio-ingress get service aks-istio-ingressgateway-external -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

  status:
    desc: Gets the overall status of the cluster
    cmds:
    - kubectl get nodes -o wide -L kubernetes.azure.com/node-image-version
    - kubectl -n kube-system get pods
    - kubectl -n aks-istio-ingress get pods,services,deployments,gateway
    - kubectl -n aks-istio-system get pods,services,deployments
    - kubectl -n cert-manager get certificate,certificaterequests,orders
    - kubectl -n eshop get pods,services,deployments,virtualservice
    - kubectl -n eshop-infra get pods,services,deployments,virtualservice
    - flux get all

  restart:
    desc: Performs a rollout restart on all deployments in eshop namespace
    cmds:
    - kubectl -n eshop rollout restart deploy

  down:
    desc: Destroys all Azure resources and cleans up Terraform
    cmds:
    - az group list --tag Application="{{.TITLE}}" --query "[].name" -o tsv | xargs -ot -n 1 az group delete -y --no-wait -n || true
    - cd infrastructure ;
      rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info || true
